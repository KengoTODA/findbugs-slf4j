{"name":"findbugs-slf4j","tagline":"A FindBugs plugin to verify usage of SLF4J","body":"# FindBugs bug pattern for SLF4J\r\nThis product helps you to verify usage of SLF4J 1.6 or 1.7. Both of Java7 and Java8 are supported.\r\n\r\n[![Build Status](https://secure.travis-ci.org/KengoTODA/findbugs-slf4j.png)](http://travis-ci.org/KengoTODA/findbugs-slf4j)\r\n\r\n## Motivation\r\n\r\nSLF4J is useful logging facade, but sometimes we mistake how to use. Can you find mistakes in following class? It is not so easy especially in huge product, this FindBugs plugin will help you to find.\r\n\r\n```java\r\nclass Foo {\r\n    private static final Logger logger = LoggerFactory.getLogger(Bar.class);\r\n\r\n    void rethrow(String name, Throwable t) {\r\n        logger.info(\"Hello, {}!\");\r\n        logger.warn(\"Now I will wrap and throw {}\", t);\r\n        throw new RuntimeException(t);\r\n    }\r\n}\r\n```\r\n\r\n\r\n# Provided bug patterns\r\n\r\nCurrently this product provides 9 patterns.\r\n\r\n## SLF4J_PLACE_HOLDER_MISMATCH\r\n\r\nThis pattern checks how placeholder is used.\r\nAlert if count of placeholder does not match to count of parameter.\r\n\r\n  Note:\r\n  Format should be CONST to use this bug pattern. Use SLF4J_FORMAT_SHOULD_BE_CONST bug pattern to check it.\r\n\r\n```java\r\nclass Foo {\r\n    private final Logger logger = LoggerFactory.getLogger(getClass());\r\n    void method() {\r\n        // invalid: this logging method has 2 placeholders, but given parameter is only 1.\r\n        logger.info(\"{}, {}.\", \"Hello\");\r\n\r\n        // valid\r\n        logger.info(\"{}, {}.\", \"Hello\", \"World\");\r\n\r\n        // invalid: Throwable instance does not need placeholder\r\n        logger.error(\"{}, {}\", \"Hello\", new RuntimeException());\r\n\r\n        // valid\r\n        logger.error(\"{}\", \"Hello\", new RuntimeException());\r\n    }\r\n}\r\n```\r\n\r\n## SLF4J_FORMAT_SHOULD_BE_CONST\r\n\r\nThis pattern checks given format is CONST or not.\r\nAlert if format is not CONST.\r\n\r\n```java\r\nclass Foo {\r\n    private final Logger logger = LoggerFactory.getLogger(getClass());\r\n    void method() {\r\n        // invalid: format is not CONST\r\n        String format = new String(\"Hello, \");\r\n        logger.info(format + \"{}.\", \"World\");\r\n\r\n        // valid\r\n        logger.info(\"Hello, {}.\", \"World\");\r\n    }\r\n}\r\n```\r\n\r\n## SLF4J_UNKNOWN_ARRAY\r\n\r\nThis pattern reports a bug if your code is using array which is provided as method argument or returned from other method.\r\nIt makes our verification harder, so please stop using it.\r\n\r\n```java\r\nclass Foo {\r\n    private final Logger logger = LoggerFactory.getLogger(getClass());\r\n    void method(Object[] args) {\r\n        // invalid: using method argument as parameter\r\n        logger.info(\"Hello, {}.\", args);\r\n\r\n        // valid\r\n        logger.info(\"Hello, {}.\", new Object[]{ \"World\" });\r\n    }\r\n}\r\n```\r\n\r\n## SLF4J_LOGGER_SHOULD_BE_PRIVATE\r\n\r\nThis pattern reports non private field whose type is org.slf4j.Logger.\r\n\r\n```java\r\nclass Foo {\r\n    // invalid: field is not private\r\n    public final Logger logger = LoggerFactory.getLogger(getClass());\r\n\r\n    // valid\r\n    private final Logger logger = LoggerFactory.getLogger(getClass());\r\n}\r\n```\r\n\r\n## SLF4J_LOGGER_SHOULD_BE_FINAL\r\n\r\nThis pattern reports non final field whose type is org.slf4j.Logger.\r\n\r\n```java\r\nclass Foo {\r\n    // invalid: field is not final\r\n    private Logger logger = LoggerFactory.getLogger(getClass());\r\n\r\n    // valid\r\n    private final Logger logger = LoggerFactory.getLogger(getClass());\r\n}\r\n```\r\n\r\n## SLF4J_LOGGER_SHOULD_BE_NON_STATIC\r\n\r\nThis pattern reports static field whose type is org.slf4j.Logger.\r\n\r\nSometimes using static logger is better than using non-static one. See [official FAQ](http://www.slf4j.org/faq.html#declared_static) for detail.\r\n\r\nIf you need to use static logger, you can use [PMD's default rule for logger](http://pmd.sourceforge.net/pmd-5.0.0/rules/java/logging-java.html#LoggerIsNotStaticFinal) instead.\r\n\r\n```java\r\nclass Foo {\r\n    // invalid: field is static\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);\r\n\r\n    // valid\r\n    private final Logger logger = LoggerFactory.getLogger(getClass());\r\n}\r\n```\r\n\r\n## SLF4J_ILLEGAL_PASSED_CLASS\r\n\r\nThis pattern reports that illegal class is passed to LoggerFactory.getLogger(Class)\r\n\r\n```java\r\nclass Foo {\r\n    // invalid: illegal class is passed to Factory\r\n    private final Logger logger = LoggerFactory.getLogger(Bar.class);\r\n\r\n    // valid\r\n    private final Logger logger = LoggerFactory.getLogger(getClass());\r\n    private final Logger logger = LoggerFactory.getLogger(Foo.class);\r\n}\r\n```\r\n\r\n## SLF4J_SIGN_ONLY_FORMAT\r\n\r\nThis pattern reports that log format which contains only sign and spaces.\r\nTo make log readable, you have to use letter to explain your log.\r\n\r\n```java\r\nclass Foo {\r\n    private final Logger logger = LoggerFactory.getLogger(getClass());\r\n    void method() {\r\n        // invalid: bad readability\r\n        logger.info(\"{}\", id);\r\n\r\n        // valid\r\n        logger.info(\"{} signed in\", userId);\r\n    }\r\n}\r\n```\r\n\r\n## SLF4J_MANUALLY_PROVIDED_MESSAGE\r\n\r\nThis pattern reports needless message which is returned by `Throwable#getMessage()`\r\nor `Throwable#getLocalizedMessage()`. Normally binding will call these methods\r\nwhen you provide throwable instance as the last argument, so you do not have to\r\ncall them manually.\r\n\r\n```java\r\nclass Foo {\r\n    private final Logger logger = LoggerFactory.getLogger(getClass());\r\n    void method() {\r\n        // invalid: needless 'e.getMessage()'\r\n        logger.info(\"Error occured. Message is {}\", e.getMessage(), e);\r\n\r\n        // valid\r\n        logger.info(\"Error occured.\", e);\r\n    }\r\n}\r\n```\r\n\r\n# how to use with Maven\r\n\r\nTo use this product, please configure your findbugs-maven-plugin like below.\r\n\r\n```xml\r\n      <plugin>\r\n        <groupId>org.codehaus.mojo</groupId>\r\n        <artifactId>findbugs-maven-plugin</artifactId>\r\n        <version>3.0.1</version>\r\n        <configuration>\r\n          <plugins>\r\n            <plugin>\r\n              <groupId>jp.skypencil.findbugs.slf4j</groupId>\r\n              <artifactId>bug-pattern</artifactId>\r\n              <version>1.2.3</version>\r\n            </plugin>\r\n          </plugins>\r\n        </configuration>\r\n      </plugin>\r\n```\r\n\r\n# Copyright and license\r\n\r\nCopyright 2012-2015 Kengo TODA\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n","google":"UA-16698566-1","note":"Don't delete this file! It's used internally to help with page regeneration."}