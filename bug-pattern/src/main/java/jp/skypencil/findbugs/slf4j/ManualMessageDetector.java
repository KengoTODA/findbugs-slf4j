package jp.skypencil.findbugs.slf4j;

import static org.apache.bcel.Const.INVOKEVIRTUAL;

import com.google.common.base.Objects;
import edu.umd.cs.findbugs.BugReporter;
import edu.umd.cs.findbugs.OpcodeStack.CustomUserValue;
import edu.umd.cs.findbugs.OpcodeStack.Item;
import jp.skypencil.findbugs.slf4j.parameter.AbstractExtendedDetectorForParameterArray;
import jp.skypencil.findbugs.slf4j.parameter.ArrayData;

@CustomUserValue
public final class ManualMessageDetector extends AbstractExtendedDetectorForParameterArray {

  @Item.SpecialKind
  private final int isMessage = Item.defineSpecialKind("message generated by throwable object");

  public ManualMessageDetector(BugReporter bugReporter) {
    super(bugReporter, "SLF4J_MANUALLY_PROVIDED_MESSAGE");
  }

  @Override
  protected int getKindOfInterest() {
    return isMessage;
  }

  @Override
  protected boolean isReallyOfInterest(Item storedItem, ArrayData arrayData, int index) {
      // Let developer logs exception message, only when argument does not have throwable instance
      // https://github.com/KengoTODA/findbugs-slf4j/issues/31
      return !(index == arrayData.getSize() - 1
              && !getThrowableHandler().checkThrowable(storedItem));
  }

  @Override
  protected boolean isWhatWeWantToDetect(int seen) {
    return seen == INVOKEVIRTUAL && !stack.isTop()
      && getThrowableHandler().checkThrowable(getStack().getStackItem(0))
      && (Objects.equal("getMessage", getNameConstantOperand())
        || Objects.equal("getLocalizedMessage", getNameConstantOperand()));
    }
}
